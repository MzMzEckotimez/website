worker_processes  1;
user www-data www-data;
error_log logs/debug.log debug;

events {
	worker_connections 1024;
}

include env.conf;

http {
	include mime.types;

	# this will stay off for a looong time.
	#lua_code_cache off;

	# redirect all http requests to https.
	#server {
	#	listen      86.105.182.2:80;
	#	server_name luapower.net;
	#	return      301 https://luapower.net$request_uri;
	#}

	server {
		listen 86.105.182.2:80;
	#	listen 86.105.182.2:443 ssl;
		server_name new.luapower.com;

		# compress all text data
		gzip on;
		gzip_min_length 1000;
		gzip_types text/plain;
		gzip_types application/json;
		gzip_types application/javascript;
		gzip_types text/css;

		# serve static files first and fallback to Lua scripts
		location / {
			root ../www;
			try_files $uri @lua;
		}

		# serve all dynamic content through a single Lua entry-point
		location @lua {
			default_type text/html;
			content_by_lua_file '../www/ngx.lua';
		}

		# facebook proxy for authentication
		location /graph.facebook.com/ {
			proxy_pass https://graph.facebook.com/;
			proxy_method GET;
			proxy_pass_request_headers off;
			proxy_pass_request_body off;
			internal;
		}

		# google+ proxy for authentication
		location /content.googleapis.com/ {
			proxy_pass https://content.googleapis.com/;
			proxy_method GET;
			proxy_pass_request_headers off;
			proxy_pass_request_body off;
			internal;
		}

		location = /oldbeat {
			return 302 /oldbeat/1;
		}

		location /oldbeat {
			root ../www;
			try_files $uri /oldbeat/index.html;
		}

		# prevent displaying our urls in frames.
		add_header X-Frame-Options DENY;

		# prevent browsers from sniffing mime types away from content-type.
		add_header X-Content-Type-Options nosniff;

		# add the ssl cert, key and dhparm
		#ssl_certificate_key ../ssl/ssl.key;
		#ssl_certificate     ../ssl/ssl.crt;
		#ssl_dhparam         ../ssl/dhparam.pem;

		# set a preferred list of cyphers
		#ssl_prefer_server_ciphers on;
		# ssl_ciphers 'AES256+EECDH:AES256+EDH:!aNULL';
		#ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;

		# disable SSL, leave TLS
		#ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

		# speed up ssl by caching conn. params.
		# 10MB = ~40k sessions; session expires after 10min.
		#ssl_session_cache shared:SSL:10m;
		#ssl_session_timeout 10m;

		# enable OCSP stapling to speed up cert. revocation checks.
		#ssl_stapling on;
		#ssl_stapling_verify on;
		#ssl_trusted_certificate ../ssl/trustchain.crt;
		#resolver 8.8.4.4 8.8.8.8 valid=300s;
		#resolver_timeout 10s;

		# enable HSTS to prevent ssl stripping (not really!), but only for a short time.
		# otherwise, if our cert expires, we won't be able to downgrade to http.
		#add_header Strict-Transport-Security max-age=14400;

	}
}
